<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jazzfool's Blog</title><link>/</link><description>Recent content on Jazzfool's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 31 Jul 2021 22:22:55 +1000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>The grim GUI landscape</title><link>/post/gui/</link><pubDate>Sat, 31 Jul 2021 22:22:55 +1000</pubDate><guid>/post/gui/</guid><description>
&lt;p>I&amp;rsquo;d like to think I&amp;rsquo;ve spent &lt;em>long enough&lt;/em> in desktop GUI development. I&amp;rsquo;m disappointed by what I&amp;rsquo;ve seen as I&amp;rsquo;ve worked with a vast palette of desktop GUI solutions. Everything from Qt to Electron have their own hideous limbs with their very own creative ways burden you as you develop your app. That isn&amp;rsquo;t to discredit them all, as a few actually offer wonderful developer experiences (though often still lacking in practicality and applicability).&lt;/p>
&lt;h2 id="electron">
&lt;a href="#electron" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Electron
&lt;/h2>
&lt;p>Electron is perhaps the most poor desktop GUI solution to pop up and it seems to have bred rapid adoption of browser technology into every corner of computing. The main problem with dragging along an entire browser isn&amp;rsquo;t that it&amp;rsquo;s bloated or memory-consuming (albeit those are still problems). It&amp;rsquo;s that they include a plethora of hidden mechanisms that will never benefit a fully controlled web-based environment (i.e., your app&amp;rsquo;s webpages). Think of the thousands of security patches and workarounds, the intricate DOM optimizations, the multi-webpage inter-process resource sharing. None of that will benefit an Electron app and will only slow it down. An Electron app will only display 3-4 webpages, all of which are fully controlled by the developer. Browsers, on the other hand, are designed to handle incredibly rare edge cases and exploits in the wildest parts of the internet.&lt;/p>
&lt;p>To put it shortly, you&amp;rsquo;re misusing the software. It&amp;rsquo;s astonishing how some people continue to defend the use of Electron for its &amp;ldquo;developer productivity&amp;rdquo;. There is a hint of truth in that, but not in the way they think. Their defence is greatly misplaced. It&amp;rsquo;s not that Electron or Chromium itself gives any developer productivity; it&amp;rsquo;s the web ecosystem and front-end frameworks.&lt;/p>
&lt;p>For all that I bash Electron, I believe it has taught a couple important lessons:&lt;/p>
&lt;ol>
&lt;li>There&amp;rsquo;s a huge appetite for a &lt;em>declarative&lt;/em> desktop GUI library.&lt;/li>
&lt;li>Developers want support from an ecosystem, especially for a GUI.&lt;/li>
&lt;/ol>
&lt;h2 id="qt">
&lt;a href="#qt" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Qt
&lt;/h2>
&lt;p>Qt is a passable desktop GUI solution, but it still has its problems.&lt;/p>
&lt;p>Firstly, your application lives &lt;em>inside&lt;/em> Qt, instead of the other way around. Instead of Qt being a library you can plug up to your own code so you can throw on a GUI, you must immerse your app completely and utterly, typically by developing with the Qt library from the very start. This means there are many clear boundaries in your code where, for example, Qt and stdlib meet (say converting an &lt;code>std::vector&lt;/code> from another library into a &lt;code>QList&lt;/code>).&lt;/p>
&lt;p>Moreover, I find imperative GUI libraries, such as Qt, quite unsatisfying in terms of expressiveness, readability, and cleanliness. There&amp;rsquo;s no clear flow of data through your GUI, as if you were to map out all the callbacks and subsequent state mutations, it would practically be spaghetti. This is in contrast to something like React where the data flow is strongly driven in a single direction. Here also lies a major architectural issue: There is no single source of truth. This occurs even at the smallest of scales, for example when syncing a label&amp;rsquo;s text with your data.&lt;/p>
&lt;p>Styling and other visual parts of Qt also leave a lot to be desired. I&amp;rsquo;m shocked that Qt does not default to GPU accelerated widget rendering when available. Screen resolutions are increasing and CPU rasterization simply cannot keep up.&lt;/p>
&lt;p>Overall however, it gets the job done. It manages to stay relatively low (compared to Electron) on memory consumption while offering a broad range of utilities and features. There is still much room for improvement though.&lt;/p>
&lt;h2 id="wpf-and-other-microsoft-ui">
&lt;a href="#wpf-and-other-microsoft-ui" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
WPF (and other Microsoft UI)
&lt;/h2>
&lt;p>WPF and its ilk are a great follow up to Qt, as they solve the problem of lacking a single source of truth and integrate seamlessly with the rest of C#.&lt;/p>
&lt;p>XAML offers property binding which is an acceptable way to solve the problem of synchronising two stores of data. By simply binding to a variable when setting the property of a widget, you can trivially bind two different datum and never have to worry about it again. On the other hand, having to manage the gap between C# and XAML is still an issue. Things start to get messy when trying to mutate the widget tree on the C# side, and vice versa. Amongst the community there seems to be a majority consensus of using MVC (or some other framework such as ReactiveUI) to architect your application around. Beyond my personal disgust for MVC (see why &lt;a href="http://web.archive.org/web/20210728123238/https://acko.net/blog/model-view-catharsis/">here&lt;/a>), it feels rather restricting that you&amp;rsquo;re expected to lock yourself into a very specific design.&lt;/p>
&lt;p>Finally, of course, there is the problem that it is exclusive to Windows. There is Avalonia, which is a step in the right direction, but it is still too young to see major adoption and support. Another point of concern is that Microsoft seems rather unstable and trigger-happy in terms of their UI story.&lt;/p>
&lt;h2 id="flutter">
&lt;a href="#flutter" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Flutter
&lt;/h2>
&lt;p>Flutter began as a mobile UI library and it is very good at that. Meanwhile, the desktop port seems unfinished, neglected, and mostly just appears to be an afterthought.&lt;/p>
&lt;p>It is very clear that Flutter is highly focused on mobile platforms given the oversized widgets, sliver headers, bottom swipeable tabs, flick to scroll, hero animations, and other widget features you would never find in a desktop-focused GUI. This is quite unfortunate since the Flutter architecture itself is terrific thanks to an attractive declarative API backed by an accessible retained element tree.&lt;/p>
&lt;p>This by all means can be fixed by building a separate widget library designed specifically for the desktop from the ground up. Somehow though, I doubt this is a venture Google would want to fund. It&amp;rsquo;s a shame since Flutter&amp;rsquo;s architecture shows so much promise in terms of ease of access, productivity, and escape hatches.&lt;/p>
&lt;h2 id="immediate-mode">
&lt;a href="#immediate-mode" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Immediate-mode
&lt;/h2>
&lt;p>Dear ImGui (and other immediate-mode UI) present a very elegant solution to many of the problems I&amp;rsquo;ve mentioned. For one, you don&amp;rsquo;t need to bother with MVC or any kind of binding or callbacks since the very notion of immediate-mode UI revolves around storing and pulling to/from a common data source. Moreover, Dear ImGui doesn&amp;rsquo;t ask for a large widget interface to implemented or for custom data structures; you can reuse your existing data structure to describe a UI. It is very much plug-and-play in that regard and feels like an integratable library rather than a bloated framework.&lt;/p>
&lt;p>Even issues that some cite as being downsides of Dear ImGui are fixable. You don&amp;rsquo;t have to render at 60 fps - only render when you receive an event. You don&amp;rsquo;t have to regenerate the entire tree every frame - perform some diffing to reuse and recycle computation. Most of these supposed issues boil down to the implementation, not with the architecture itself.&lt;/p>
&lt;p>With that said, there are still some &lt;em>fundamental&lt;/em> downsides with being fully immediate-mode. One such downside is layout. Since everything is computed in one go, you can&amp;rsquo;t backtrack to fix up layout after receiving new information (e.g., sizing to fill but later discovering more room to fill; too bad, you can&amp;rsquo;t go back). At this point, you&amp;rsquo;ll have to resort to storing an intermediate tree to do a separate layout pass.&lt;/p>
&lt;p>If you&amp;rsquo;re willing to give up some of the purity of full immediate-mode and begin to introduce intermediate trees and layout callbacks then you could very well fix these issues. Though, I also find there is a mentality in immediate-mode UI that it should only be used for internal tooling (mostly for game engines). I whole-heartedly disagree. If you choose to make it more robust with intermediate trees and whatnot, then you have a React-esque library on your hands which is more than capable for more complex desktop applications, only missing a desktop focused widget library (as opposed to tooling focused).&lt;/p>
&lt;h2 id="closing-thoughts">
&lt;a href="#closing-thoughts" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
Closing thoughts
&lt;/h2>
&lt;p>There are many GUI libraries I left out, so I&amp;rsquo;ll briefly explain why:&lt;/p>
&lt;ul>
&lt;li>FLTK, Tk, libui, Lazarus, etc: They are not as robust as one would wish for more complex applications. They do not offer many escape hatches as they are really an abstraction of the OS GUI (which also do not offer many escape hatches). As a result, things such as custom widgets and styling are greatly lacking.&lt;/li>
&lt;li>JavaFX, Swing, GTK, etc: These generally fall in the same camp as Qt and WPF.&lt;/li>
&lt;/ul>
&lt;p>GUI is an incredibly difficult problem and an incredibly ugly problem. There is no elegance to be found here. A good GUI API implementation is one that is willing to be ugly for the sake of performance, accessibility, and usability.&lt;/p></description></item></channel></rss>