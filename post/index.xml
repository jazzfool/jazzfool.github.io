<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jazzfool's Blog</title><link>/post/</link><description>Recent content in Posts on Jazzfool's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Aug 2021 13:49:36 +1000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring reactive UI</title><link>/post/reactive/</link><pubDate>Sun, 01 Aug 2021 13:49:36 +1000</pubDate><guid>/post/reactive/</guid><description>Past Many are familiar with the practicality of the Qt API. It abides by what most already know of object-oriented programming and manually mutated states. By far the biggest advantage of such an API is its clarity; there is nothing to learn or understand as what you write is exactly what you mean.
1 2 3 4 5 6 7 8 9 10 11 12 13 int state = 5; // .</description></item><item><title>The grim GUI landscape</title><link>/post/gui/</link><pubDate>Sat, 31 Jul 2021 22:22:55 +1000</pubDate><guid>/post/gui/</guid><description>I&amp;rsquo;d like to think I&amp;rsquo;ve spent long enough in desktop GUI development. I&amp;rsquo;m disappointed by what I&amp;rsquo;ve seen as I&amp;rsquo;ve worked with a vast palette of desktop GUI solutions. Everything from Qt to Electron have their own hideous limbs with their very own creative ways burden you as you develop your app. That isn&amp;rsquo;t to discredit them all, as a few actually offer wonderful developer experiences (though often still lacking in practicality and applicability).</description></item></channel></rss>